{"version":3,"sources":["component/CommentList/CommentList.module.scss","pages/HomePage/HomePage.module.scss","component/Comment/Comment.module.scss","component/FilterCommentsButton/FilterCommentsButton.module.scss","component/Map/Map.module.scss","component/NewCommentButton/NewCommentButton.module.scss","component/NewCommentForm/NewCommentForm.module.scss","App.module.scss","component/Comment/index.js","component/Search/index.js","component/FilterCommentsButton/index.js","component/CommentList/index.js","services/comments.js","component/Map/index.js","component/NewCommentButton/index.js","component/NewCommentForm/index.js","pages/HomePage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Comment","comment","this","props","className","s","name","text","React","Component","Search","onSearch","uid","type","placeholder","onChange","e","target","value","FilterCommentsButton","state","allCommentsDisplayed","changeFiltersState","setState","filterClickHandler","inputMask","myUid","filterButton","onClick","CommentList","commentSelected","changeSelectedComment","prevProps","activeComment","commentsList","onCommentClick","onFiltersChange","commentList","filters","map","item","id","commentTab","commentTab_active","key","getCommentsList","a","fetch","res","json","body","Map","defaultCenter","center","zoom","changeCenter","lat","lng","myPoint","activeMarker","onMarkerClick","markersList","googleMapsApiKey","mapContainerClassName","mapContainer","position","marker","NewCommentButton","openFormHandler","container","NewCommentForm","onFormSubmit","onSubmit","preventDefault","elements","form","HomePage","formIsOpened","filteredComments","componentDidMount","getComments","comments","getCurrentUid","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","receivedComments","i","Object","keys","length","push","currentUuid","cookies","get","uuidv4","set","changeActiveMarker","point","openForm","makeNewComment","formElements","newComment","changeDisplayedComments","mask","searchedComments","usersComments","RegExp","test","sideBlock","withCookies","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.91ba7cdd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"commentList\":\"CommentList_commentList__FsB2h\",\"commentTab\":\"CommentList_commentTab__AM0o3\",\"commentTab_active\":\"CommentList_commentTab_active__16i4x\",\"filters\":\"CommentList_filters__1vHvp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"HomePage_map__3IFim\",\"container\":\"HomePage_container__3zXw_\",\"sideBlock\":\"HomePage_sideBlock__3kyYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Comment_comment__2mct8\",\"name\":\"Comment_name__3QJe6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterButton\":\"FilterCommentsButton_filterButton__2Choa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"Map_map__zEKBO\",\"mapContainer\":\"Map_mapContainer__3cyuI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewCommentButton_container__2Pk48\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3Ye9V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1JR0v\",\"App-logo\":\"App_App-logo__1QKMT\",\"App-header\":\"App_App-header__2CLVe\",\"App-link\":\"App_App-link__3KAD-\",\"map\":\"App_map__3vp-6\",\"container\":\"App_container__2Vu3r\",\"sideBlock\":\"App_sideBlock__1IGD-\",\"App-logo-spin\":\"App_App-logo-spin__3ttEy\"};","import React from \"react\";\r\n\r\nimport s from \"./Comment.module.scss\";\r\n\r\nclass Comment extends React.Component {\r\n    render() {\r\n        const {comment} = this.props;\r\n        return(\r\n            <div className={s.comment}>\r\n                <span className={s.name}>{comment.name}</span>\r\n                <p>{comment.text}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\n\r\nimport s from './Search.module.scss';\r\n\r\nclass Search extends React.Component {\r\n    render() {\r\n        const { onSearch, uid } = this.props;\r\n        return(\r\n            <input type=\"text\" placeholder=\"Search\" onChange={(e)=>onSearch(e.target.value, uid)}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nimport s from \"./FilterCommentsButton.module.scss\";\r\n\r\nclass FilterCommentsButton extends React.Component {\r\n    state = {\r\n        allCommentsDisplayed: true\r\n    };\r\n\r\n    changeFiltersState = () => {\r\n      this.setState({\r\n          allCommentsDisplayed: !this.state.allCommentsDisplayed\r\n      })\r\n    };\r\n\r\n    render() {\r\n        const { allCommentsDisplayed } = this.state;\r\n        const { filterClickHandler, inputMask, myUid } = this.props;\r\n        return(\r\n            <button className={s.filterButton}\r\n                onClick={()=>{this.changeFiltersState();\r\n                allCommentsDisplayed? filterClickHandler(inputMask, myUid):filterClickHandler(inputMask, \"\")}}>\r\n                {allCommentsDisplayed?\"My comments\":\"All comments\"}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterCommentsButton;\r\n","import React from \"react\";\r\n\r\nimport s from \"./CommentList.module.scss\";\r\nimport Comment from \"../Comment\";\r\nimport Search from \"../Search\";\r\nimport FilterCommentsButton from \"../FilterCommentsButton\";\r\n\r\nclass CommentList extends React.Component{\r\n    state = {\r\n        commentSelected: \"\",\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.activeComment !== this.props.activeComment) {\r\n            this.changeSelectedComment(this.props.activeComment);\r\n        }\r\n    }\r\n\r\n    changeSelectedComment = (comment) => {\r\n        this.setState({\r\n            commentSelected: comment,\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { commentsList, activeComment, onCommentClick, onFiltersChange,  inputMask, uid, myUid }=this.props;\r\n        const { commentSelected } = this.state;\r\n\r\n        return(\r\n            <div className={s.commentList}>\r\n                <div className={s.filters}>\r\n                    <Search onSearch={onFiltersChange} uid={uid} myUid={myUid}/>\r\n                    <FilterCommentsButton filterClickHandler={onFiltersChange} inputMask={inputMask}  myUid={myUid} />\r\n                </div>\r\n                {\r\n                    commentsList.map((item) =>\r\n                        <button\r\n                            onClick={()=>onCommentClick(item)}\r\n                            className={\r\n                                commentSelected.id===item.id? `${s.commentTab} ${s.commentTab_active}`:`${s.commentTab}`\r\n                            }\r\n                            key={item.id}\r\n                        >\r\n                            <Comment\r\n                            comment={item}\r\n                        />\r\n                        </button>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommentList;\r\n","const getCommentsList = async() => {\r\n    const res = await fetch(`https://run.mocky.io/v3/6fd19c31-4349-4853-818f-7f1654561a9d`);\r\n    const body = await res.json();\r\n    return body;\r\n};\r\n\r\nexport default getCommentsList;\r\n","import React from \"react\";\r\nimport {GoogleMap, Marker, LoadScript} from \"@react-google-maps/api\";\r\n\r\nimport s from \"./Map.module.scss\";\r\n\r\n\r\nclass Map extends React.Component {\r\n    state = {\r\n        defaultCenter: {},\r\n        center: {},\r\n        zoom: 7\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.myPoint !== this.props.myPoint) {\r\n            this.setState({\r\n                defaultCenter: {\r\n                    lat: this.props.myPoint.lat,\r\n                    lng: this.props.myPoint.lng\r\n                },\r\n                center: {\r\n                    lat: this.props.myPoint.lat,\r\n                    lng: this.props.myPoint.lng\r\n                },\r\n                zoom: this.state.zoom,\r\n            },);\r\n        }\r\n        if (prevProps.activeMarker !== this.props.activeMarker) {\r\n            this.changeCenter(this.props.activeMarker.lat, this.props.activeMarker.lng)\r\n        }\r\n    }\r\n\r\n    changeCenter = (lat, lng) => {\r\n        this.setState({\r\n            defaultCenter: this.state.defaultCenter,\r\n            center: {\r\n                lat,\r\n                lng\r\n            },\r\n            zoom: 5\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { defaultCenter, center, zoom } = this.state;\r\n        const { activeMarker, onMarkerClick, markersList, myPoint } = this.props;\r\n        return (\r\n            <LoadScript\r\n                googleMapsApiKey=\"AIzaSyAemEnOiurLbBg2C1a9YraNw95Uay-R6U8\"\r\n            >\r\n                <GoogleMap\r\n                    zoom={zoom}\r\n                    defaultCenter={defaultCenter}\r\n                    center={center}\r\n                    mapContainerClassName={s.mapContainer}\r\n                >\r\n                    <Marker\r\n                        onClick={()=>{\r\n                            this.changeCenter(defaultCenter.lat, defaultCenter.lng);\r\n                        }}\r\n                         position={{lat: defaultCenter.lat, lng: defaultCenter.lng}}\r\n                    />\r\n                    {\r\n                        markersList.map((marker) =>\r\n                            <Marker\r\n                                key={marker.id}\r\n                                id={marker.id}\r\n                                position={{\r\n                                    lat: marker.lat,\r\n                                    lng: marker.lng\r\n                                }}\r\n                                onClick={()=>{\r\n                                    onMarkerClick(marker);\r\n                                    this.changeCenter(marker.lat, marker.lng);\r\n                                }}\r\n                            />\r\n                        )\r\n                    }\r\n                </GoogleMap>\r\n            </LoadScript>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\n\r\nimport s from \"./NewCommentButton.module.scss\";\r\n\r\nclass NewCommentButton extends React.Component{\r\n    render() {\r\n        const { openFormHandler } = this.props;\r\n        return(\r\n            <div className={s.container}>\r\n                <button onClick={()=>openFormHandler()}>Add new comment</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewCommentButton;\r\n","import React from \"react\";\r\n\r\nimport s from \"./NewCommentForm.module.scss\";\r\n\r\nclass NewCommentForm extends React.Component{\r\n    render() {\r\n        const { onFormSubmit } = this.props;\r\n        return(\r\n            <form onSubmit={(e)=>{e.preventDefault(); onFormSubmit(e.target.elements);}} className={s.form}>\r\n                <label>\r\n                    Name\r\n                    <input type=\"text\"/>\r\n                </label>\r\n                <label>\r\n                    Text\r\n                    <input type=\"text\"/>\r\n                </label>\r\n                <button type=\"submit\">Add</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default NewCommentForm;\r\n","import React from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { withCookies } from 'react-cookie';\r\n\r\nimport s from './HomePage.module.scss';\r\nimport CommentList from \"../../component/CommentList\";\r\nimport getCommentsList from \"../../services/comments\";\r\nimport Map from \"../../component/Map\";\r\nimport NewCommentButton from \"../../component/NewCommentButton\";\r\nimport NewCommentForm from \"../../component/NewCommentForm\";\r\n\r\nclass HomePage extends React.Component{\r\n    state = {\r\n        activeMarker: \"\",\r\n        formIsOpened: false,\r\n        commentsList: [],\r\n        filteredComments: [],\r\n        inputMask: \"\",\r\n        uid: \"\",\r\n        myUid: \"\",\r\n        myPoint: {}\r\n    };\r\n\r\n\r\n    componentDidMount = async () => {\r\n        const comments = await this.getComments();\r\n        const myUid = await this.getCurrentUid();\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            this.setState({\r\n                commentsList: comments,\r\n                filteredComments: comments,\r\n                myUid: myUid,\r\n                myPoint: {\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getComments = async() => {\r\n        const receivedComments = await getCommentsList();\r\n        let comments = [];\r\n        for (let i=0; i<Object.keys(receivedComments).length; i++) {\r\n            comments.push(receivedComments[i]);\r\n        }\r\n        return comments;\r\n    };\r\n\r\n    getCurrentUid = async() => {\r\n        let currentUuid = this.props.cookies.get('uuid');\r\n        if (!currentUuid) {\r\n            currentUuid = uuidv4();\r\n            this.props.cookies.set('uuid', currentUuid);\r\n        }\r\n        return currentUuid;\r\n    };\r\n\r\n\r\n    changeActiveMarker = (point) => {\r\n        this.setState({\r\n            activeMarker: point,\r\n            formIsOpened: this.state.formIsOpened,\r\n        })\r\n    };\r\n\r\n    openForm = () => {\r\n        this.setState({\r\n            activeMarker: this.state.activeMarker,\r\n            formIsOpened: true,\r\n        })\r\n    };\r\n\r\n    makeNewComment = (formElements) => {\r\n        const newComment = {\r\n            \"id\": this.state.commentsList.length+1,\r\n            \"name\": formElements[0].value,\r\n            \"text\": formElements[1].value,\r\n            \"lat\": this.state.myPoint.lat,\r\n            \"lng\": this.state.myPoint.lng,\r\n            \"uid\": this.state.myUid\r\n        };\r\n        this.state.commentsList.push(newComment);\r\n        this.setState({\r\n            activeMarker: this.state.activeMarker,\r\n            formIsOpened: false,\r\n        });\r\n    };\r\n\r\n    changeDisplayedComments = (mask, uid) => {\r\n        let searchedComments=[];\r\n        let usersComments=[];\r\n        let inputMask = new RegExp(`${mask}`);\r\n        if(mask.length!==0){\r\n            for(let i=0; i<this.state.commentsList.length; i++) {\r\n                if((inputMask.test(this.state.commentsList[i].name))||(inputMask.test(this.state.commentsList[i].text))) {\r\n                    searchedComments.push(this.state.commentsList[i]);\r\n                }\r\n            }\r\n        } else {\r\n            searchedComments = this.state.commentsList;\r\n        }\r\n\r\n        if(uid.length!==0) {\r\n            for(let i=0; i<searchedComments.length; i++) {\r\n                if(uid===searchedComments[i].uid) {\r\n                    usersComments.push(searchedComments[i]);\r\n                }\r\n            }\r\n        }else {\r\n            usersComments = searchedComments;\r\n        }\r\n\r\n        this.setState({\r\n            filteredComments: usersComments,\r\n            inputMask: mask,\r\n            uid: uid\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { activeMarker, formIsOpened, myPoint, inputMask, commentsList, filteredComments, uid, myUid } = this.state;\r\n        const { cookies } = this.props;\r\n        return (\r\n            <>\r\n                <div className={s.container}>\r\n                    <Map onMarkerClick={this.changeActiveMarker}\r\n                         activeMarker={activeMarker}\r\n                         markersList={commentsList}\r\n                         myPoint={myPoint}\r\n                    />\r\n                    <div className={s.sideBlock}>\r\n                        {\r\n                            formIsOpened?\"\":<NewCommentButton openFormHandler={this.openForm}/>\r\n                        }\r\n                        {\r\n                            formIsOpened?\r\n                                <NewCommentForm onFormSubmit={this.makeNewComment}/>:<CommentList\r\n                                    activeComment={activeMarker}\r\n                                    commentsList={commentsList.length===filteredComments.length? commentsList:filteredComments}\r\n                                    onCommentClick={this.changeActiveMarker}\r\n                                    onFiltersChange={this.changeDisplayedComments}\r\n                                    inputMask={inputMask}\r\n                                    uid={uid}\r\n                                    myUid={myUid}\r\n                                />\r\n\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withCookies(HomePage);\r\n","import React from 'react';\nimport s from './App.module.scss';\nimport HomePage from \"./pages/HomePage\";\nimport CookiesProvider from \"react-cookie/cjs/CookiesProvider\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <CookiesProvider>\n                <HomePage/>\n            </CookiesProvider>\n        </div>\n        );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}